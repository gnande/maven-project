pipeline
{
	agent any
	stages
	{
	  stage ('checkout git master branch.')
	  {
			steps
			{
				git branch: 'gnande-docker-branch', url: 'https://github.com/gnande/maven-project.git'
			}
	  
	  }
	  
	  stage ('Build java project by maven')
	  {
		  withMaven(jdk: 'localjdk', maven: 'localmaven') 
			{
				sh 'mvn clean package'
			}
		
	  }
	  
	  stage ('Build docker image by using artifacts created by maven. Basically, It reads Dockerfile from your downloaded GIT repo and builds image.')
	  {
			sh 'docker build -t gnande/myapp-javamvn:1.0.0 .'   /* myapp-javamvn:1.0.0 = image name */
	  }
	  
	  
	  stage ('Login to DockerHub account and Push image.')
	  {	    
		withCredentials([usernameColonPassword(credentialsId: 'dockerhubaccount', variable: 'dockerhubaccount')])
		{
			sh 'docker login -u gnande -p ${dockerhubaccount}' 
		}	
		sh 'docker push gnande/myapp-javamvn:1.0.0'
	  }
	  
	  stage ('Remove old Container if exist with same name.')
	  {
	    def sshCmd = 'ssh -o StrictHostKeyChecking=no ec2-user@172.31.1.32'
	    def RemoveContainer = 'docker rm -rf my-tomcat-app'
		sshagent(['deploy-to-devenv-docker'])
		{
			try{
			
				sh '${sshCmd} ${RemoveContainer}'
					
			    }catch(error){
				
				}				
		}
	  }	  
	  
	  stage ('Create container on Dev Environment using DockerHub account image.')
	  {
		def dockerrun = 'docker run -d -p 15000:8080 --name my-tomcat-app gnande/myapp-javamvn:1.0.0'
		sshagent(['deploy-to-devenv-docker'])
		{
			sh 'ssh -o StrictHostKeyChecking=no ec2-user@172.31.1.32 ${dockerrun}'
		}
	  }	  
	}
}
