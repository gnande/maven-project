node
{
 // This is scripted pipeline. This has "node" at starting. Where as Declarative "Pipeline" has Pipeline at starting.
 // Scripted pipeline i.e. node. it does Not have agent, stages, steps. You can write def, if block, for loop in this pipeline directly.
 // Declarative "Pipeline" has Pipeline at starting and if you want to write if block, for loop etc. then you have to write "Script" block and
 // inside scipt block you can write for loop etc.
 
	  stage ('checkout git master branch.')
	  {
			
				git branch: 'gnande-docker-branch', url: 'https://github.com/gnande/maven-project.git'
			
	  
	  }
	  
	  stage ('Build java project by maven')
	  {
		
		
			  withMaven(jdk: 'localjdk', maven: 'localmaven') 
				{
					sh 'mvn clean package'
				}
			
	  }
	  
	  stage ('Basically, It reads Dockerfile from your downloaded GIT repo and builds image.')
	  {
			
				sh 'docker build -t gnande/myapp-javamvn:1.0.0 .'   /* gnande/myapp-javamvn:1.0.0 = image name in local */
			
	  }	  

	/* "dockerhubaccount" account created on Jenkins server at path  Jenkins > Credentials > System > Global Credentials>  (Scope=Global) and create user id & pwd and save.*/
	  stage ('Login to DockerHub account and Push image.') 
	  {	    			
			withCredentials([usernamePassword(credentialsId: 'dockerhubaccount', passwordVariable: 'dockerhubpwd', usernameVariable: 'dockerhubuserid')]) 
			{
				sh "docker login -u gnande -p ${dockerhubpwd}"
			}
			
			sh 'docker push gnande/myapp-javamvn:1.0.0'		
	  }
	  
	  stage ('Remove old Container if exist with same name.')
	  {
		
			def sshCmd = 'ssh -o StrictHostKeyChecking=no ec2-user@172.31.1.32'
			def StopContainer = 'docker stop my-tomcat-app'
			def WaitContainer = 'docker wait my-tomcat-app' // Block until one or more containers stop, then print their exit codes.
			def RemoveContainer = 'docker rm my-tomcat-app'
			sshagent(['deploy-to-devenv-docker'])
			{
				try{				
					sh "${sshCmd} ${StopContainer} ${WaitContainer} ${RemoveContainer}" /* here we are using double quotes "" because double quotes gives result of varable like ${sshCmd} */
					//sh "${RemoveContainer}"	
					}catch(error){
					
					}				
			}		
	  }	  
	  
	  stage ('Create container on Dev Environment using DockerHub account image.')
	  {		
			def dockerrun = 'docker run -d -p 15000:8080 --name my-tomcat-app gnande/myapp-javamvn:1.0.0'
			sshagent(['deploy-to-devenv-docker'])
			{
				//sh 'sudo chmod 777 /var/run/docker.sock'  // Do not give this command in Jenkinsfile otherwise it will give below error :-)
				sh "ssh -o StrictHostKeyChecking=no ec2-user@172.31.1.32 ${dockerrun}"
				
				/*Below is the error : 
				
					+ sudo chmod 777 /var/run/docker.sock
	
					We trust you have received the usual lecture from the local System
					Administrator. It usually boils down to these three things:
					
						#1) Respect the privacy of others.
						#2) Think before you type.
						#3) With great power comes great responsibility.
					
					sudo: no tty present and no askpass program specified
				
				*/
			}			  
	  }
	
}
 /* how to check website is running in container ?
 Type below URL in browser : 
 http://<ip address>:15000/webapp/  */
